Survey order	Use case	Must have	Nice to have	Not important	Weighted Score	Caleb Sunstrum	Barry Revzin	Alisdair Meredith	Lisa Lippincott	Timur Doumler	John Lakos	Attila Fehér	Fabio Fracassi	Rostislav Khlebnikov	Vittorio Romeo	Andrzej Krzemienski		Ville Voutilainen	Tomasz Kamiński	Miguel Ojeda	Gašper Ažman	Jonathan Caves		Joshua Berne	Balog Pal	Tom Honermann	John McFarlane	Roger Orr	Aaron Ballman	Dr Peter Brett	Thomas Russell	Tony Van Eerd	Hal Finkel	Herb Sutter	Ryan McDougall
1	As a: DeveloperIn order to: Reason explicitlyI want to: Annotate my program anywhere in the code with my current understanding of its structure or execution	18	10	0	1.64	Nice to have	Nice to have	Nice to have	Must have	Nice to have	Must have	Must have	Must have	Must have	Must have	Must have	Nice to have	Must have	Must have	Nice to have	Must have	Nice to have	Must have	Must have	Must have	Must have	Nice to have	Must have	Nice to have	Must have	Must have	Must have	Nice to have	Must have	Must have
2	As a: DeveloperIn order to: Reason explicitlyI want to: Express a spectrum of confidence in my annotations, from “unsure” and asking for validation, to “sure” and asking for some effect to be applied (eg. “maybe”, “definitely”, “assume” 'something')	9	10	9	1.00	Must have	Not important	Must have	Must have	Nice to have	Not important	Must have	Nice to have	Nice to have	Must have	Nice to have	Must have	Must have	Not important	Not important	Must have	Not important	Not important	Nice to have	Nice to have	Nice to have	Not important	Nice to have	Nice to have	Not important	Not important	Nice to have	Must have	Not important	Must have
3	As a: DeveloperIn order to: Reason explicitlyI want to: Express a spectrum of importance of my annotations, from "critical" (eg. bring the system down) to "minor" (eg. lead to a slower fallback)	4	10	14	0.64	Nice to have	Not important	Must have	Nice to have	Nice to have	Not important	Not important	Must have	Not important	Must have	Nice to have	Nice to have	Nice to have	Not important	Not important	Nice to have	Not important	Not important	Not important	Not important	Nice to have	Not important	Nice to have	Not important	Not important	Nice to have	Not important	Must have	Not important	Must have
4	As a: DeveloperIn order to: Reason explicitlyI want to: Express a spectrum of expected cost at compile or runtime of my annotations, from "unrunnable" to "expensive" to "cheap"	10	11	7	1.11	Not important	Not important	Must have	Nice to have	Must have	Must have	Must have	Nice to have	Nice to have	Must have	Must have	Nice to have	Nice to have	Nice to have	Not important	Must have	Not important	Not important	Must have	Nice to have	Not important	Must have	Nice to have	Not important	Nice to have	Must have	Nice to have	Nice to have	Nice to have	Must have
5	As a: DeveloperIn order to: Reason about executionsI want to: Have annotations affect the execution of my program in accordance with my expectations	13	9	6	1.25	Not important	Not important	Must have	Must have	Nice to have	Not important	Must have	Must have	Nice to have	Must have	Nice to have	Nice to have	Must have	Not important	Not important	Nice to have	Not important	Must have	Must have	Must have	Must have	Must have	Nice to have	Must have	Nice to have	Nice to have	Nice to have	Must have	Not important	Must have
6	As a: DeveloperIn order to: Reason about executionsI want to: Ensure annotations do not substantially change the meaning of my program when enabled	17	8	3	1.50	Not important	Must have	Nice to have	Not important	Must have	Must have	Must have	Must have	Must have	Nice to have	Nice to have	Must have	Must have	Must have	Must have	Nice to have	Must have	Must have	Nice to have	Must have	Must have	Nice to have	Must have	Must have	Nice to have	Not important	Must have	Nice to have	Must have	Must have
7	As a: DeveloperIn order to: Reason about executionsI want to: Have the effect of annotations on executions be user controllable (ie. decide whether “cheap” checks or “critical” terminates)	15	10	3	1.43	Nice to have	Must have	Must have	Must have	Must have	Must have	Must have	Must have	Nice to have	Must have	Nice to have	Nice to have	Nice to have	Must have	Not important	Nice to have	Nice to have	Not important	Must have	Must have	Must have	Must have	Nice to have	Not important	Must have	Nice to have	Nice to have	Must have	Not important	Must have
8	As a: DeveloperIn order to: Adapt and progress with my projectI want to: Be able to easily change my confidence, importance, or other properties of my annotations over time	10	17	1	1.32	Must have	Nice to have	Must have	Nice to have	Nice to have	Nice to have	Must have	Nice to have	Nice to have	Nice to have	Nice to have	Nice to have	Nice to have	Nice to have	Not important	Must have	Nice to have	Must have	Must have	Must have	Must have	Nice to have	Nice to have	Nice to have	Nice to have	Nice to have	Must have	Must have	Not important	Must have
9	As a: DeveloperIn order to: Have readable annotationsI want to: Have annotations with a succinct and elegant syntax	15	13	0	1.54	Must have	Must have	Nice to have	Nice to have	Must have	Nice to have	Nice to have	Must have	Must have	Must have	Must have	Must have	Must have	Nice to have	Must have	Nice to have	Must have	Must have	Nice to have	Nice to have	Nice to have	Must have	Nice to have	Nice to have	Must have	Nice to have	Must have	Nice to have	Must have	Must have
10	As a: DeveloperIn order to: Have readable annotationsI want to: Have annotation keywords or names with intuitive, clear, and unambiguous meanings	17	11	0	1.61	Nice to have	Must have	Nice to have	Nice to have	Must have	Nice to have	Must have	Must have	Must have	Must have	Must have	Must have	Nice to have	Nice to have	Must have	Nice to have	Must have	Must have	Must have	Must have	Nice to have	Nice to have	Nice to have	Must have	Must have	Nice to have	Must have	Must have	Must have	Must have
11	As a: DeveloperIn order to: Have readable annotationsI want to: Have my contract specification to be visually primary, and secondary information (syntax, hints, roles, levels, etc.) to not be distracting	5	17	6	0.96	Must have	Must have	Nice to have	Not important	Nice to have	Nice to have	Nice to have	Nice to have	Nice to have	Nice to have	Must have	Must have	Nice to have	Not important	Nice to have	Nice to have	Nice to have	Must have	Not important	Not important	Nice to have	Nice to have	Not important	Nice to have	Nice to have	Not important	Nice to have	Nice to have	Must have	Not important
12	As a: DeveloperIn order to: Interoperate with tools or personsI want to: A syntax that can both be parsed and can be reasoned about semantically	21	6	1	1.71	Must have	Must have	Not important	Must have	Must have	Nice to have	Must have	Nice to have	Nice to have	Nice to have	Must have	Nice to have	Must have	Must have	Must have	Must have	Must have	Must have	Nice to have	Must have	Must have	Must have	Must have	Must have	Must have	Must have	Must have	Must have	Must have	Must have
13	As a: DeveloperIn order to: Interoperate with tools or personsI want to: Expose annotations to tools that might leverage them (eg. code linter, static analyzer, semantic prover, compiler sanitizer, binary analyzer, code reviewer, etc.)	18	9	1	1.61	Nice to have	Must have	Nice to have	Must have	Nice to have	Must have	Must have	Nice to have	Nice to have	Nice to have	Must have	Not important	Must have	Must have	Must have	Must have	Must have	Must have	Nice to have	Must have	Must have	Must have	Nice to have	Must have	Must have	Must have	Nice to have	Must have	Must have	Must have
14	As a: C++ DeveloperIn order to: Get up to speedI want to: Have annotations use familiar syntax	3	13	12	0.68	Not important	Must have	Not important	Nice to have	Not important	Nice to have	Not important	Not important	Not important	Nice to have	Must have	Nice to have	Not important	Not important	Nice to have	Nice to have	Not important	Not important	Must have	Nice to have	Nice to have	Nice to have	Nice to have	Not important	Nice to have	Not important	Nice to have	Nice to have	Nice to have	Nice to have
15	As a: C++ DeveloperIn order to: Get up to speedI want to: Have annotations use C++ syntax	9	10	8	1.04	Not important	Must have	Nice to have		Not important	Not important	Nice to have	Nice to have	Must have	Must have	Must have	Not important	Nice to have	Must have	Not important	Nice to have	Not important	Not important	Must have	Nice to have	Must have	Must have	Nice to have	Not important	Nice to have	Nice to have	Nice to have	Must have	Must have	Nice to have
16	As a: C++ DeveloperIn order to: Reuse codeI want to: Have annotations use my custom types or functions	19	8	1	1.64	Nice to have	Must have	Nice to have	Must have	Not important	Must have	Must have	Must have	Must have	Must have	Must have	Nice to have	Must have	Must have	Nice to have	Must have	Nice to have	Must have	Must have	Must have	Must have	Must have	Must have	Nice to have	Must have	Nice to have	Nice to have	Must have	Must have	Nice to have
17	As a: C++ DeveloperIn order to: Have a single source of truthI want to: Use same source file for both code and annotations	23	4	1	1.79	Must have	Must have	Must have	Must have	Must have	Not important	Must have	Must have	Must have	Nice to have	Must have	Nice to have	Nice to have	Must have	Must have	Nice to have	Must have	Must have	Must have	Must have	Must have	Must have	Must have	Must have	Must have	Must have	Must have	Must have	Must have	Must have
18	As a: C++ DeveloperIn order to: Support modern featuresI want to: Minimize use of macros	6	17	5	1.04	Not important	Nice to have	Nice to have	Nice to have	Must have	Not important	Must have	Nice to have	Nice to have	Not important	Must have	Nice to have	Must have	Nice to have	Must have	Nice to have	Nice to have	Nice to have	Not important	Not important	Nice to have	Must have	Nice to have	Nice to have	Nice to have	Nice to have	Nice to have	Nice to have	Must have	Nice to have
19	As a: C++ DeveloperIn order to: Support modern featuresI want to: Be interoperable with modules	22	6	0	1.79	Must have	Must have	Must have	Must have	Must have	Must have	Must have	Must have	Nice to have	Must have	Must have	Nice to have	Must have	Must have	Nice to have	Must have	Must have	Nice to have	Must have	Must have	Nice to have	Must have	Must have	Must have	Must have	Nice to have	Must have	Must have	Must have	Must have
20	As a: C++ DeveloperIn order to: Support modern featuresI want to: Be interoperable with coroutines	15	10	3	1.43	Must have	Must have	Nice to have	Must have	Must have	Nice to have	Must have	Must have	Nice to have	Must have	Must have	Nice to have	Nice to have	Nice to have	Not important	Must have	Nice to have	Nice to have	Nice to have	Not important	Nice to have	Must have	Must have	Must have	Must have	Not important	Must have	Must have	Nice to have	Must have
21	As a: C++ DeveloperIn order to: Support modern featuresI want to: Be interoperable with concepts	17	9	2	1.54	Must have	Must have	Not important	Must have	Must have	Not important	Must have	Must have	Nice to have	Must have	Must have	Nice to have	Nice to have	Nice to have	Nice to have	Must have	Must have	Nice to have	Nice to have	Nice to have	Nice to have	Must have	Must have	Must have	Must have	Must have	Must have	Must have	Not important	Must have
22	As a: C++ DeveloperIn order to: Use the standard library in-contractI want to: Codify existing exposition-only standard library requirements	7	16	5	1.07	Nice to have	Nice to have	Not important	Must have	Must have	Not important	Must have	Must have	Nice to have	Nice to have	Nice to have	Not important	Not important	Nice to have	Nice to have	Nice to have	Nice to have	Nice to have	Not important	Must have	Must have	Must have	Nice to have	Nice to have	Nice to have	Nice to have	Nice to have	Nice to have	Nice to have	Nice to have
23	As a: C++ DeveloperIn order to: Use DebuggerI want to: Have runtime able to launch a debugger from an annotation if necessary	8	11	9	0.96	Nice to have	Must have	Nice to have	Nice to have	Nice to have	Nice to have	Must have	Not important	Nice to have	Not important	Must have	Not important	Must have	Not important	Not important	Must have	Not important	Must have	Not important	Nice to have	Not important	Must have	Nice to have	Must have	Nice to have	Not important	Nice to have	Nice to have	Nice to have	Not important
24	As a: C++ DeveloperIn order to: Use existing build modesI want to: Have annotations affect executions depending on my existing build modes (eg. Debug or Release modes in VS)	8	11	9	0.96	Nice to have	Must have	Nice to have	Nice to have	Nice to have	Not important	Must have	Nice to have	Nice to have	Must have	Must have	Nice to have	Not important	Must have	Not important	Not important	Not important	Not important	Not important	Must have	Not important	Must have	Nice to have	Nice to have	Must have	Not important	Nice to have	Nice to have	Nice to have	Nice to have
25	As a: C DeveloperIn order to: Write contracts on my functionsI want to: Specify contracts in a way standardizable as part of the C language	2	6	19	0.37	Nice to have	Not important		Not important	Not important	Not important	Not important	Not important	Not important	Not important	Nice to have	Not important	Not important	Not important	Nice to have	Nice to have	Must have	Not important	Nice to have	Not important	Nice to have	Not important	Not important	Must have	Not important	Not important	Not important	Not important	Not important	Not important
26	As a: C DeveloperIn order to: Write contracts on my functionsI want to: Use contracts with macro-safe keywords that are reserved C names (i.e., _Pre, _Post, _Assert, etc.)	1	6	20	0.30	Nice to have	Not important		Not important	Not important	Not important	Not important	Not important	Not important	Not important	Nice to have	Nice to have	Not important	Not important	Nice to have	Not important	Must have	Not important	Nice to have	Not important	Not important	Not important	Not important	Nice to have	Not important	Not important	Not important	Not important	Not important	Not important
27	As a: C DeveloperIn order to: Write contracts on my functionsI want to: Have a common violation handler for both violated C and C++ contracts	2	11	14	0.56	Nice to have	Not important		Not important	Not important	Not important	Not important	Nice to have	Not important	Not important	Nice to have	Not important	Nice to have	Not important	Not important	Nice to have	Must have	Nice to have	Nice to have	Nice to have	Nice to have	Not important	Not important	Must have	Nice to have	Not important	Nice to have	Not important	Not important	Not important
28	As a: C DeveloperIn order to: Write contracts on my functionsI want to: Make all contract semantics optional (so as not to change WG14-N2385 6.7.11 p2)	3	3	21	0.33	Not important	Not important		Not important	Not important	Not important	Not important	Not important	Not important	Not important	Nice to have	Not important	Nice to have	Not important	Must have	Not important	Nice to have	Not important	Not important	Not important	Must have	Not important	Not important	Must have	Not important	Not important	Not important	Not important	Not important	Not important
29	As a: Mixed C/C++ DeveloperIn order to: Maintain mixed code baseI want to: Not lose contracts when crossing languages	3	13	11	0.70	Nice to have	Not important		Nice to have	Not important	Not important	Must have	Nice to have	Not important	Not important	Nice to have	Nice to have	Nice to have	Not important	Nice to have	Nice to have	Must have	Nice to have	Nice to have	Not important	Nice to have	Not important	Not important	Must have	Not important	Nice to have	Nice to have	Not important	Not important	Nice to have
30	As a: Mixed C/C++ DeveloperIn order to: Write contracts on my functionsI want to: Expose my contracts to C++ developers through 'extern "C"' declarations of my functions	1	12	14	0.52	Nice to have	Not important		Not important	Not important	Not important	Nice to have	Nice to have	Not important	Not important	Nice to have	Not important	Nice to have	Not important	Nice to have	Nice to have	Must have	Not important	Nice to have	Not important	Nice to have	Not important	Not important	Nice to have	Not important	Nice to have	Nice to have	Not important	Not important	Not important
31	As an: API DeveloperIn order to: Communicate my interface to usersI want to: Document the expected inputs and expected outputs on my interface	20	5	3	1.61	Must have	Must have	Must have	Must have	Must have	Not important	Must have	Must have	Nice to have	Must have	Must have	Nice to have	Must have	Must have	Nice to have	Must have	Nice to have	Not important	Must have	Must have	Not important	Must have	Must have	Must have	Must have	Must have	Must have	Nice to have	Must have	Must have
32	As an: API DeveloperIn order to: Establish a contractI want to: Have validation inform me which output values are unexpected or invalid	12	14	2	1.36	Must have	Nice to have	Not important	Must have	Must have	Not important	Nice to have	Nice to have	Nice to have	Must have	Must have	Nice to have	Must have	Nice to have	Nice to have	Must have	Nice to have	Must have	Must have	Nice to have	Nice to have	Must have	Nice to have	Must have	Must have	Nice to have	Nice to have	Nice to have	Must have	Must have
33	As an: API DeveloperIn order to: Establish a contractI want to: Have validation inform me which class invariants are violated	12	14	2	1.36	Must have	Nice to have	Nice to have	Must have	Must have	Not important	Must have	Nice to have	Nice to have	Must have	Must have	Nice to have	Not important	Must have	Nice to have	Nice to have	Nice to have	Must have	Nice to have	Nice to have	Nice to have	Must have	Nice to have	Must have	Must have	Must have	Nice to have	Nice to have	Must have	Must have
34	As an: API DeveloperIn order to: Establish a contractI want to: Have validation inform user which input values are unexpected or invalid	16	11	1	1.54	Must have	Nice to have	Nice to have	Must have	Must have	Must have	Must have	Nice to have	Must have	Must have	Must have	Nice to have	Must have	Nice to have	Nice to have	Must have	Nice to have	Must have	Must have	Must have	Nice to have	Must have	Nice to have	Must have	Must have	Nice to have	Nice to have	Not important	Must have	Must have
35	As an: API DeveloperIn order to: Establish a contractI want to: Have contracts specify their pre-conditions as logical predicates	23	3	2	1.75	Must have	Must have	Nice to have	Not important	Must have	Must have	Must have	Must have	Must have	Must have	Must have	Nice to have	Must have	Must have	Must have	Must have	Must have	Not important	Must have	Must have	Must have	Must have	Must have	Must have	Nice to have	Must have	Must have	Must have	Must have	Must have
36	As an: API DeveloperIn order to: Establish a contractI want to: Have contracts specify their class invariants as logical predicates	10	13	5	1.18	Must have	Nice to have	Nice to have	Not important	Must have	Nice to have	Must have	Not important	Nice to have	Must have	Must have	Not important	Not important	Nice to have	Nice to have	Nice to have	Must have	Not important	Nice to have	Must have	Nice to have	Must have	Nice to have	Must have	Nice to have	Must have	Nice to have	Nice to have	Must have	Must have
37	As an: API DeveloperIn order to: Establish a contractI want to: Have contracts specify their post-conditions as logical predicates	18	5	5	1.46	Must have	Must have	Not important	Not important	Must have	Nice to have	Must have	Not important	Nice to have	Must have	Must have	Not important	Must have	Must have	Must have	Must have	Must have	Not important	Nice to have	Must have	Nice to have	Must have	Must have	Must have	Nice to have	Must have	Must have	Must have	Must have	Must have
38	As an: API DeveloperIn order to: Express predicatesI want to: Make reference to either the values of my inputs, or other in-scope identifiers	24	2	2	1.79	Must have	Must have	Must have	Must have	Must have	Not important	Must have	Must have	Must have	Must have	Must have	Not important	Must have	Must have	Must have	Must have	Nice to have	Must have	Must have	Nice to have	Must have	Must have	Must have	Must have	Must have	Must have	Must have	Must have	Must have	Must have
39	As an: API DeveloperIn order to: Establish a contractI want to: Make reference to the before and after values of in-out variables (ie. passed by pointer or reference) in post-conditions	11	10	7	1.14	Must have	Must have	Nice to have	Must have	Must have	Not important	Must have	Nice to have	Nice to have	Must have	Must have	Not important	Not important	Nice to have	Nice to have	Must have	Not important	Must have	Nice to have	Not important	Not important	Must have	Nice to have	Nice to have	Not important	Nice to have	Nice to have	Must have	Must have	Nice to have
40	As an: API DeveloperIn order to: Establish a contractI want to: Make reference to the before and after values of mutable class members (eg. new_size = old_size+1 after push_back) in post-conditions	8	13	7	1.04	Nice to have	Nice to have	Nice to have	Must have	Nice to have	Not important	Must have	Not important	Nice to have	Must have	Must have	Not important	Not important	Nice to have	Must have	Nice to have	Not important	Must have	Nice to have	Nice to have	Not important	Must have	Nice to have	Nice to have	Not important	Nice to have	Nice to have	Must have	Must have	Nice to have
41	As an: API DeveloperIn order to: Establish a contractI want to: Make reference to the before and after values of global state (eg., global >= old(global) + 1) in post-conditions	3	12	13	0.64	Nice to have	Not important	Nice to have	Must have	Nice to have	Not important	Not important	Not important	Nice to have	Not important	Nice to have	Not important	Not important	Not important	Not important	Nice to have	Not important	Must have	Nice to have	Nice to have	Not important	Nice to have	Not important	Nice to have	Not important	Nice to have	Nice to have	Must have	Nice to have	Nice to have
42	As an: API DeveloperIn order to: Extend contractual aspectsI want to: Annotate operations as being exception safe	0	16	12	0.57	Nice to have	Nice to have	Nice to have	Nice to have	Nice to have	Not important	Not important	Not important	Nice to have	Nice to have	Not important	Not important	Nice to have	Nice to have	Not important	Nice to have	Nice to have	Nice to have	Nice to have	Not important	Not important	Not important	Nice to have	Nice to have	Not important	Not important	Not important	Nice to have	Not important	Nice to have
43	As an: API DeveloperIn order to: Extend contractual aspectsI want to: Annotate operations as being thread safe	0	16	12	0.57	Nice to have	Nice to have	Nice to have	Nice to have	Nice to have	Not important	Not important	Nice to have	Nice to have	Nice to have	Not important	Not important	Nice to have	Nice to have	Not important	Nice to have	Not important	Nice to have	Not important	Not important	Not important	Nice to have	Nice to have	Nice to have	Not important	Not important	Not important	Nice to have	Not important	Nice to have
44	As an: API DeveloperIn order to: Extend contractual aspectsI want to: Annotate operations as being atomic (ie. all or no changes become visible)	0	15	13	0.54	Nice to have	Nice to have	Nice to have	Nice to have	Nice to have	Not important	Not important	Not important	Nice to have	Nice to have	Not important	Not important	Nice to have	Nice to have	Not important	Nice to have	Not important	Nice to have	Not important	Not important	Not important	Nice to have	Nice to have	Nice to have	Not important	Not important	Not important	Nice to have	Not important	Not important
45	As an: API DeveloperIn order to: Extend contractual aspectsI want to: Annotate operations as real-time (ie. guaranteed to complete within a time frame)	1	9	18	0.39	Not important	Nice to have	Not important	Not important	Nice to have	Not important	Not important	Not important	Nice to have	Nice to have	Not important	Not important	Nice to have	Not important	Not important	Must have	Not important	Nice to have	Not important	Not important	Not important	Nice to have	Nice to have	Not important	Not important	Not important	Not important	Nice to have	Not important	Not important
46	As an: API DeveloperIn order to: Extend contractual aspectsI want to: Annotate operations as being deterministic (ie. same outputs for same inputs)	6	12	10	0.86	Not important	Must have	Not important	Must have	Nice to have	Not important	Not important	Nice to have	Nice to have	Must have	Not important	Not important	Nice to have	Nice to have	Nice to have	Must have	Not important	Nice to have	Not important	Nice to have	Not important	Nice to have	Nice to have	Nice to have	Not important	Must have	Nice to have	Must have	Not important	Nice to have
47	As an: API DeveloperIn order to: Extend contractual aspectsI want to: Annotate operations as functionally pure (ie. no side effects)	5	14	9	0.86	Not important	Must have	Nice to have	Not important	Nice to have	Nice to have	Not important	Not important	Nice to have	Must have	Not important	Nice to have	Nice to have	Nice to have	Nice to have	Must have	Not important	Nice to have	Not important	Nice to have	Not important	Nice to have	Nice to have	Nice to have	Not important	Must have	Nice to have	Must have	Not important	Nice to have
48	As an: API DeveloperIn order to: Extend contractual aspectsI want to: Annotate operations as having global side effects (ie. write to singleton, file, network, or database)	0	16	12	0.57	Not important	Not important	Nice to have	Nice to have	Nice to have	Nice to have	Not important	Not important	Nice to have	Nice to have	Not important	Nice to have	Nice to have	Nice to have	Not important	Nice to have	Not important	Nice to have	Not important	Nice to have	Not important	Nice to have	Nice to have	Nice to have	Not important	Not important	Not important	Nice to have	Not important	Nice to have
49	As an: API DeveloperIn order to: Extend contractual aspectsI want to: Annotate algorithmic complexity	0	11	17	0.39	Not important	Not important	Nice to have	Nice to have	Nice to have	Not important	Not important	Not important	Nice to have	Nice to have	Not important	Nice to have	Nice to have	Not important	Not important	Nice to have	Not important	Nice to have	Not important	Not important	Not important	Nice to have	Not important	Not important	Not important	Not important	Not important	Nice to have	Not important	Not important
50	As an: API DeveloperIn order to: Express unrunnable contractsI want to: Be able to use a predicate that is not evaluated at runtime, because it might be unsafe to run or have stateful side effects	9	14	5	1.14	Not important	Must have	Must have	Not important	Not important	Nice to have	Nice to have	Must have	Nice to have	Nice to have	Nice to have	Not important	Nice to have	Nice to have	Nice to have	Must have	Not important	Nice to have	Must have	Nice to have	Must have	Must have	Nice to have	Nice to have	Must have	Must have	Nice to have	Nice to have	Not important	Must have
51	As an: API DeveloperIn order to: Express unrunnable contractsI want to: Be able to use a predicate that doesn’t have a definition, because it hasn’t been written yet, or is infeasible to run	9	12	7	1.07	Not important	Must have	Must have	Not important	Not important	Nice to have	Nice to have	Must have	Nice to have	Nice to have	Must have	Not important	Nice to have	Must have	Not important	Must have	Not important	Must have	Must have	Not important	Must have	Nice to have	Nice to have	Nice to have	Nice to have	Nice to have	Nice to have	Nice to have	Not important	Must have
52	As an: API DeveloperIn order to: Express uncheckable contractsI want to: Be able to use a predicate that is not evaluated, because it is simply a semantic placeholder for a tool	9	12	7	1.07	Not important	Must have	Nice to have	Not important	Not important	Nice to have	Must have	Nice to have	Nice to have	Nice to have	Must have	Not important	Nice to have	Must have	Nice to have	Must have	Not important	Must have	Must have	Not important	Must have	Nice to have	Nice to have	Must have	Nice to have	Nice to have	Not important	Nice to have	Not important	Must have
53	As an: API DeveloperIn order to: Express uncheckable contractsI want to: Be able to use a predicate that cannot have a complete definition, because it is inexpressible in the language	9	9	10	0.96	Not important	Must have	Must have	Not important	Not important	Nice to have	Nice to have	Nice to have	Nice to have	Nice to have	Must have	Not important	Nice to have	Must have	Nice to have	Must have	Not important	Must have	Must have	Not important	Must have	Not important	Not important	Not important	Nice to have	Must have	Not important	Nice to have	Not important	Must have
54	As an: API DeveloperIn order to: Establish responsibility boundariesI want to: Inform users which errors are the responsibility of the caller, and which are the callee	14	11	3	1.39	Must have	Must have	Must have	Must have	Nice to have	Nice to have	Nice to have	Must have	Must have	Must have	Must have	Nice to have	Nice to have	Must have	Not important	Must have	Nice to have	Nice to have	Must have	Must have	Nice to have	Nice to have	Nice to have	Nice to have	Not important	Not important	Must have	Must have	Must have	Not important
55	As an: API DeveloperIn order to: Establish responsibility boundariesI want to: Annotate assertions inside function bodies that indirectly test preconditions (such as malformed data discovered while performing the algorithm) should be reported to the caller as precondition failures	5	13	10	0.82	Nice to have	Must have	Nice to have	Not important	Must have	Must have	Nice to have	Nice to have	Nice to have	Nice to have	Nice to have	Nice to have	Nice to have	Not important	Not important	Nice to have	Not important	Not important	Nice to have	Must have	Not important	Not important	Nice to have	Not important	Not important	Not important	Nice to have	Must have	Not important	Not important
56	As an: API DeveloperIn order to: Have contract as part of my interfaceI want to: Declare contract when I declare the function	19	6	3	1.57	Must have	Must have	Not important	Must have	Must have	Nice to have	Must have	Must have	Nice to have	Must have	Must have	Not important	Must have	Nice to have	Must have	Must have	Not important	Nice to have	Nice to have	Must have	Must have	Must have	Must have	Must have	Nice to have	Must have	Must have	Must have	Must have	Must have
57	As an: API DeveloperIn order to: Keep my user interfaces clean and narrowI want to: Be able to access private implementation details of the class so I don’t have to widen public interface to declare predicates	12	12	4	1.29	Must have	Nice to have	Not important	Must have	Not important	Nice to have	Must have	Must have	Nice to have	Must have	Nice to have	Not important	Must have	Nice to have	Not important	Must have	Nice to have	Must have	Must have	Must have	Must have	Nice to have	Nice to have	Must have	Nice to have	Nice to have	Nice to have	Nice to have	Not important	Must have
58	As an: API DeveloperIn order to: Keep my public interfaces clean and conciseI want to: Place function contract conditions on any declaration (e.g., on redeclarations at the bottom of the header, or on the definition in an implementation file, where they are less distracting).	7	9	12	0.82	Not important	Nice to have	Nice to have	Nice to have	Not important	Must have	Must have	Must have	Must have	Nice to have	Not important	Not important	Nice to have	Not important	Not important	Not important	Nice to have	Not important	Must have	Nice to have	Must have	Nice to have	Not important	Not important	Nice to have	Not important	Not important	Must have	Nice to have	Nice to have
59	As an: API DeveloperIn order to: Move contract violation out of error handlingI want to: Replace uses of error handling to express contract violation (eg. operator[](size_t n) noexcept [[pre: n < size()]] instead of throwing)	10	11	7	1.11	Must have	Must have	Nice to have	Not important	Nice to have	Not important	Not important	Must have	Nice to have	Must have	Must have	Not important	Must have	Not important	Nice to have	Must have	Not important	Nice to have	Nice to have	Must have	Must have	Must have	Nice to have	Nice to have	Not important	Nice to have	Nice to have	Nice to have	Must have	Must have
60	As a: C++ API DeveloperIn order to: Write classesI want to: Declare class invariants that all of my public functions need to maintain	10	13	4	1.22	Must have	Nice to have	Nice to have	Not important	Must have		Must have	Nice to have	Nice to have	Must have	Must have	Not important	Not important	Nice to have	Nice to have	Nice to have	Nice to have	Must have	Must have	Nice to have	Nice to have	Must have	Nice to have	Must have	Nice to have	Must have	Not important	Nice to have	Must have	Must have
61	As a: C++ API DeveloperIn order to: Maintain a class hierarchyI want to: Ensure overriding methods have same or wider preconditions (see: Liskov substitution principle)	6	19	3	1.11	Must have	Nice to have	Nice to have	Must have	Nice to have	Not important	Must have	Nice to have	Nice to have	Nice to have	Nice to have	Not important	Nice to have	Nice to have	Nice to have	Not important	Nice to have	Nice to have	Nice to have	Nice to have	Nice to have	Must have	Nice to have	Nice to have	Nice to have	Nice to have	Must have	Must have	Nice to have	Not important
62	As a: C++ API DeveloperIn order to: Maintain a class hierarchyI want to: Ensure overriding functions meet their base class postconditions when their base class preconditions are met (see: Liskov substitution principle)	8	19	1	1.25	Must have	Must have	Nice to have	Must have	Nice to have	Not important	Must have	Nice to have	Nice to have	Nice to have	Nice to have	Nice to have	Nice to have	Nice to have	Nice to have	Nice to have	Nice to have	Nice to have	Nice to have	Nice to have	Nice to have	Must have	Must have	Nice to have	Nice to have	Nice to have	Must have	Must have	Nice to have	Not important
63	As a: C++ API DeveloperIn order to: Maintain a class hierarchy.I want to: Allow overriding functions to have narrower preconditions/wider postconditions if I want to	3	12	13	0.64	Not important	Not important	Not important	Must have	Nice to have	Must have	Not important	Not important	Not important	Must have	Not important	Not important	Nice to have	Nice to have	Nice to have	Not important	Nice to have	Nice to have	Nice to have	Nice to have	Nice to have	Nice to have	Not important	Nice to have	Not important	Nice to have	Not important	Not important	Nice to have	Nice to have
64	As a: C++ API DeveloperIn order to: Express public class invariantsI want to: Express a restriction on the public interface of a type that all callers of the type can depend upon: can mention only public members, and is checked on entry and exit from this type’s code	1	18	9	0.71	Nice to have	Nice to have	Not important	Not important	Nice to have	Nice to have	Nice to have	Nice to have	Nice to have	Nice to have	Must have	Nice to have	Not important	Not important	Nice to have	Nice to have	Not important	Nice to have	Nice to have	Nice to have	Not important	Nice to have	Not important	Nice to have	Not important	Nice to have	Not important	Nice to have	Must have	Nice to have
65	As a: C++ API DeveloperIn order to: Express public class invariantsI want to: Check invariants before and after every public method (when called from outside the type, not when one member function calls another)	3	20	5	0.93	Must have	Nice to have	Not important	Not important	Must have	Nice to have	Nice to have	Nice to have	Nice to have	Must have	Nice to have	Nice to have	Not important	Nice to have	Nice to have	Nice to have	Not important	Nice to have	Nice to have	Nice to have	Nice to have	Nice to have	Nice to have	Nice to have	Not important	Nice to have	Nice to have	Nice to have	Must have	Nice to have
66	As a: C++ API DeveloperIn order to: Express public class invariantsI want to: Check invariants before and after calling functions that are not part of this type (including virtual calls)	1	19	8	0.75	Nice to have	Nice to have	Not important	Must have	Nice to have	Nice to have	Nice to have	Not important	Nice to have	Nice to have	Nice to have	Nice to have	Not important	Nice to have	Nice to have	Not important	Not important	Nice to have	Nice to have	Not important	Nice to have	Nice to have	Nice to have	Nice to have	Not important	Nice to have	Not important	Nice to have	Must have	Nice to have
67	As a: C++ API DeveloperIn order to: Express base class invariantsI want to: Express a restriction on the protected interface of a type that derived types can depend upon: can mention only protected and public members, and is checked on entry and exit from this type’s code	0	15	13	0.54	Nice to have	Not important	Not important	Not important	Nice to have	Not important	Not important	Nice to have	Nice to have	Nice to have	Nice to have	Nice to have	Not important	Not important	Nice to have	Not important	Not important	Nice to have	Nice to have	Not important	Not important	Not important	Nice to have	Nice to have	Not important	Nice to have	Nice to have	Nice to have	Must have	Not important
68	As a: C++ API DeveloperIn order to: Express base class invariantsI want to: Check invariants on entry and exit of every protected method (when called from the derived type, not when one base member function calls another)	1	13	13	0.56	Must have	Not important	Not important	Not important	Nice to have	Not important	Not important	Not important	Nice to have	Nice to have	Nice to have	Nice to have	Not important	Not important	Nice to have	Not important	Not important	Nice to have	Nice to have	Not important	Nice to have	Not important		Nice to have	Not important	Nice to have	Nice to have	Nice to have	Must have	Not important
69	As a: C++ API DeveloperIn order to: Express base class invariantsI want to: Check invariants before and after every call to a virtual function (when calling to the derived type)	1	18	9	0.71	Nice to have	Not important	Not important	Must have	Nice to have	Not important	Not important	Not important	Nice to have	Nice to have	Nice to have	Not important	Not important	Nice to have	Nice to have	Nice to have	Not important	Nice to have	Nice to have	Nice to have	Nice to have	Nice to have	Nice to have	Nice to have	Not important	Nice to have	Nice to have	Nice to have	Must have	Not important
70	As a: C++ API DeveloperIn order to: Express private class invariantsI want to: Express an internal restriction on the private implementation of a type, can mention any member, and is checked on entry and exit from this type’s code	3	14	11	0.71	Must have	Not important	Not important	Must have	Nice to have	Nice to have	Not important	Nice to have	Nice to have	Nice to have	Nice to have	Not important	Not important	Nice to have	Nice to have	Must have	Not important	Nice to have	Nice to have	Not important	Not important	Not important	Nice to have	Nice to have	Not important	Nice to have	Not important	Nice to have	Must have	Not important
71	As a: C++ API DeveloperIn order to: Express private class invariantsI want to: Check invariants on entry and exit of every public method (when called from outside the type, not when one member function calls another)	3	17	8	0.82	Must have	Not important	Not important	Not important	Nice to have	Not important	Not important	Nice to have	Nice to have	Must have	Nice to have	Nice to have	Not important	Nice to have	Nice to have	Must have	Not important	Nice to have	Nice to have	Nice to have	Nice to have	Nice to have	Nice to have	Nice to have	Not important	Nice to have	Nice to have	Nice to have	Must have	Not important
72	As a: C++ API DeveloperIn order to: Express private class invariantsI want to: Check invariants before and after calling functions that are not part of this type (including virtual calls)	1	15	12	0.61	Nice to have	Not important	Not important	Must have	Nice to have	Not important	Not important	Nice to have	Nice to have	Nice to have	Nice to have	Not important	Not important	Nice to have	Not important	Nice to have	Not important	Nice to have	Nice to have	Not important	Nice to have	Not important	Nice to have	Nice to have	Not important	Nice to have	Not important	Nice to have	Must have	Not important
73	As a: C++ API DeveloperIn order to: Test my classesI want to: For every member or friend function in my class, run my unit test framework with checking enabled for every assertion at the point where it is written, and check every postcondition at every non-exceptional exit, and test my class invariants on entry and exit from this type’s code	10	9	9	1.04	Must have	Must have	Must have	Must have	Nice to have	Nice to have	Must have	Nice to have	Must have	Must have	Must have	Nice to have	Not important	Not important	Must have	Must have	Not important	Not important	Nice to have	Not important	Not important	Nice to have	Nice to have	Not important	Not important	Nice to have	Nice to have	Not important	Must have	Not important
74	As a: C++ API DeveloperIn order to: Enforce contracts in async codeI want to: Express contracts on callbacks such as std::function, function pointers, or references to functions, lambdas, or function objects	5	19	4	1.04	Nice to have	Must have	Nice to have	Must have	Must have	Nice to have	Nice to have	Nice to have	Nice to have	Must have	Nice to have	Nice to have	Nice to have	Nice to have	Not important	Nice to have	Not important	Nice to have	Nice to have	Not important	Nice to have	Nice to have	Nice to have	Nice to have	Not important	Nice to have	Nice to have	Must have	Nice to have	Nice to have
75	As a: C++ API DeveloperIn order to: Enforce contracts in exception safe codeI want to: Express contracts on exceptional exit	6	13	9	0.89	Must have	Must have	Nice to have	Must have	Not important	Not important	Nice to have	Not important	Nice to have	Must have	Not important	Nice to have	Nice to have	Not important	Not important	Nice to have	Not important	Nice to have	Nice to have	Not important	Nice to have	Not important	Nice to have	Nice to have	Nice to have	Must have	Nice to have	Must have	Not important	Not important
76	As a: C++ API DeveloperIn order to: Use contracts with variadic templatesI want to: Allow predicate (fold) expansion	11	14	3	1.29	Nice to have	Must have	Nice to have	Nice to have	Nice to have	Not important	Must have	Not important	Must have	Must have	Must have	Not important	Must have	Nice to have	Nice to have	Must have	Nice to have	Must have	Nice to have	Nice to have	Must have	Nice to have	Nice to have	Nice to have	Nice to have	Must have	Must have	Nice to have	Nice to have	Not important
77	As a: C++ API DeveloperIn order to: Use coroutinesI want to: Define and check pre and post conditions as I would a regular function	11	13	4	1.25	Must have	Must have	Nice to have	Nice to have	Nice to have	Not important	Nice to have	Nice to have	Nice to have	Must have	Must have	Not important	Nice to have	Must have	Not important	Nice to have	Not important	Must have	Must have	Nice to have	Nice to have	Must have	Nice to have	Must have	Nice to have	Nice to have	Must have	Must have	Nice to have	Nice to have
78	As a: C++ API DeveloperIn order to: Use coroutinesI want to: Define and check invariants over all entry and exit points from a coroutine (to its awaiter or promise)	4	18	6	0.93	Nice to have	Nice to have	Nice to have	Must have	Nice to have	Not important	Nice to have	Not important	Nice to have	Nice to have	Nice to have	Nice to have	Nice to have	Nice to have	Not important	Must have	Not important	Nice to have	Nice to have	Not important	Nice to have	Must have	Not important	Must have	Nice to have	Nice to have	Nice to have	Nice to have	Nice to have	Not important
79	As an: Integration DeveloperIn order to: Conform to a contractI want to: Be informed any time an interface’s contract is violated	15	11	2	1.46	Must have	Must have	Not important	Must have	Must have	Nice to have	Nice to have	Nice to have	Must have	Must have	Must have	Nice to have	Must have	Must have	Nice to have	Must have	Nice to have	Not important	Must have	Must have	Nice to have	Nice to have	Nice to have	Must have	Must have	Nice to have	Nice to have	Must have	Nice to have	Must have
80	As an: Integration DeveloperIn order to: Conform to a contractI want to: Verify results from a call are expected output values	15	9	4	1.39	Must have	Must have	Not important	Must have	Must have	Nice to have	Not important	Nice to have	Nice to have	Must have	Must have	Nice to have	Must have	Must have	Nice to have	Must have	Not important	Not important	Must have	Must have	Nice to have	Must have	Nice to have	Must have	Must have	Nice to have	Nice to have	Must have	Must have	Must have
81	As an: Integration DeveloperIn order to: Build multiple librariesI want to: Use contract-enabled header-only libraries	22	6	0	1.79	Must have	Must have	Must have	Must have	Must have	Must have	Nice to have	Must have	Must have	Must have	Must have	Nice to have	Must have	Must have	Must have	Must have	Nice to have	Nice to have	Must have	Nice to have	Must have	Must have	Must have	Must have	Must have	Must have	Nice to have	Must have	Must have	Must have
82	As an: Integration DeveloperIn order to: Build multiple librariesI want to: Use contract-enabled binary libraries	19	7	1	1.67	Must have	Must have	Must have	Must have	Nice to have		Must have	Nice to have	Must have	Must have	Must have	Not important	Must have	Must have	Must have	Must have	Nice to have	Nice to have	Must have	Nice to have	Must have	Must have	Nice to have	Must have	Must have	Must have	Nice to have	Must have	Must have	Must have
83	As an: Integration DeveloperIn order to: Build multiple librariesI want to: Only be required to manage a small, common set of build/link configurations	9	13	6	1.11	Nice to have	Must have	Not important	Nice to have	Must have	Nice to have	Must have	Nice to have	Nice to have	Not important	Must have	Nice to have	Not important	Must have	Must have	Nice to have	Not important	Nice to have	Not important	Not important	Must have	Nice to have	Nice to have	Nice to have	Must have	Must have	Nice to have	Nice to have	Nice to have	Nice to have
84	As an: Integration DeveloperIn order to: Debug multiple librariesI want to: Enable checks only within a selected library	13	14	1	1.43	Nice to have	Must have	Must have	Nice to have	Must have	Nice to have	Nice to have	Must have	Must have	Must have	Nice to have	Not important	Must have	Nice to have	Nice to have	Must have	Nice to have	Nice to have	Must have	Must have	Must have	Must have	Nice to have	Nice to have	Nice to have	Nice to have	Nice to have	Must have	Must have	Must have
85	As an: Integration DeveloperIn order to: Debug multiple librariesI want to: Enable checks on multiple libraries simultaneously	13	13	2	1.39	Nice to have	Must have	Nice to have	Nice to have	Must have	Must have	Nice to have	Must have	Must have	Must have	Nice to have	Not important	Nice to have	Nice to have	Nice to have	Must have	Nice to have	Nice to have	Must have	Must have	Must have	Must have	Must have	Nice to have	Nice to have	Nice to have	Not important	Must have	Nice to have	Must have
86	As an: Integration DeveloperIn order to: Debug multiple call sitesI want to: Enable checks only on selected call sites	6	17	5	1.04	Nice to have	Must have	Nice to have	Nice to have	Not important	Nice to have	Nice to have	Nice to have	Nice to have	Must have	Nice to have	Nice to have	Nice to have	Not important	Not important	Nice to have	Not important	Nice to have	Must have	Must have	Must have	Nice to have	Not important	Nice to have	Nice to have	Nice to have	Nice to have	Must have	Nice to have	Must have
87	As an: Integration DeveloperIn order to: Correct failed checksI want to: Be informed what check failed, when, where, and how	18	9	1	1.61	Must have	Must have	Must have	Must have	Must have	Must have	Must have	Nice to have	Must have	Must have	Nice to have	Nice to have	Must have	Must have	Nice to have	Must have	Not important	Must have	Must have	Must have	Nice to have	Nice to have	Nice to have	Must have	Must have	Nice to have	Nice to have	Must have	Must have	Must have
88	As an: Integration DeveloperIn order to: Correct failed checksI want to: Transmit check failure information in environment-specific ways (logs, email, special hardware traps, popup windows, blazing sirens, etc).	10	13	5	1.18	Nice to have	Must have	Must have	Nice to have	Nice to have	Nice to have	Nice to have	Nice to have	Nice to have	Must have	Nice to have	Not important	Must have	Nice to have	Not important	Must have	Not important	Must have	Must have	Not important	Nice to have	Not important	Nice to have	Must have	Must have	Nice to have	Nice to have	Must have	Nice to have	Must have
89	As an: Integration DeveloperIn order to: Correct failed checksI want to: Install custom violation handler where I can inject custom logic to trap errors	13	8	7	1.21	Nice to have	Must have	Not important	Nice to have	Nice to have	Must have	Must have	Must have	Nice to have	Must have	Not important	Not important	Must have	Not important	Not important	Must have	Must have	Must have	Must have	Nice to have	Must have	Not important	Nice to have	Not important	Must have	Nice to have	Nice to have	Must have	Nice to have	Must have
90	As an: Integration DeveloperIn order to: Unify violation handlingI want to: Be able to override how library violations are handled in the combined software to point into my handling code	14	8	6	1.29	Must have	Must have	Must have	Nice to have	Nice to have	Nice to have	Must have	Must have	Must have	Must have	Nice to have	Not important	Must have	Not important	Not important	Must have	Nice to have	Must have	Must have	Must have	Must have	Not important	Nice to have	Not important	Nice to have	Not important	Nice to have	Must have	Nice to have	Must have
91	As an: Integration DeveloperIn order to: Be independent of build environmentI want to: Be able to define and override violation handler via source code	4	9	14	0.63	Must have	Nice to have	Nice to have	Nice to have	Nice to have		Must have	Nice to have	Nice to have	Not important	Not important	Nice to have	Not important	Not important	Not important	Not important	Not important	Must have	Not important	Not important	Not important	Not important	Nice to have	Not important	Not important	Nice to have	Not important	Must have	Nice to have	Nice to have
92	As an: Integration DeveloperIn order to: Minimize checking overheadI want to: Disable library postconditions, asserts, and invariants, without disabling library preconditions (assuming the library is tested and stable and my code is not)	7	13	8	0.96	Not important	Not important	Nice to have	Nice to have	Nice to have	Must have	Must have	Nice to have	Must have	Must have	Nice to have	Nice to have	Nice to have	Not important	Nice to have	Nice to have	Not important	Not important	Must have	Must have	Nice to have	Nice to have	Not important	Nice to have	Not important	Not important	Nice to have	Must have	Must have	Nice to have
93	As an: Integrated Software ProviderIn order to: Ensure the combined software is correctI want to: Turn checks on at build time	19	6	3	1.57	Not important	Must have	Must have	Must have	Nice to have	Must have	Must have	Must have	Must have	Must have	Nice to have	Not important	Must have	Must have	Nice to have	Must have	Must have	Not important	Must have	Nice to have	Must have	Must have	Must have	Must have	Must have	Nice to have	Nice to have	Must have	Must have	Must have
94	As an: Integrated Software ProviderIn order to: Ensure the combined software is correctI want to: Turn checks on at run time	4	10	14	0.64	Nice to have	Not important	Nice to have	Not important	Must have	Not important	Nice to have	Not important	Not important	Must have	Not important	Nice to have	Nice to have	Not important	Nice to have	Not important	Nice to have	Not important	Must have	Not important	Not important	Not important	Nice to have	Not important	Not important	Nice to have	Nice to have	Must have	Nice to have	Must have
95	As an: Integrated Software ProviderIn order to: Ensure the combined software is correctI want to: Turn on any subset of individual (call site) checks on at build time	9	10	8	1.04	Not important	Must have	Nice to have	Nice to have	Nice to have	Must have	Nice to have	Must have	Nice to have	Must have	Nice to have	Not important	Nice to have	Must have	Not important	Must have	Not important	Nice to have	Must have	Nice to have	Must have	Not important	Not important		Not important	Not important	Nice to have	Must have	Nice to have	Nice to have
96	As an: Integrated Software ProviderIn order to: Ensure the combined software is correctI want to: Turn on any subset of individual (call site) checks on at run time	3	10	15	0.57	Nice to have	Not important	Nice to have	Not important	Nice to have	Not important	Nice to have	Not important	Nice to have	Must have	Not important	Nice to have	Nice to have	Not important	Not important	Not important	Not important	Nice to have	Must have	Nice to have	Not important	Not important	Not important	Not important	Not important	Not important	Nice to have	Must have	Nice to have	Nice to have
97	As an: Integrated Software ProviderIn order to: Ensure the combined software is correctI want to: Verify all annotations are globally consistent when integrated	2	19	6	0.85	Nice to have	Nice to have		Nice to have	Nice to have	Nice to have	Nice to have	Nice to have	Nice to have	Nice to have	Not important	Not important	Nice to have	Nice to have	Not important	Must have	Nice to have	Nice to have	Nice to have	Not important	Nice to have	Nice to have	Not important	Nice to have	Nice to have	Not important	Nice to have	Must have	Nice to have	Must have
98	As an: Integrated Software ProviderIn order to: Ensure individual features are correctI want to: Have a way to audit (named or semantic) subsets of checks for various deployments	4	14	9	0.81	Nice to have	Not important		Nice to have	Nice to have	Must have	Must have	Nice to have	Nice to have	Nice to have	Nice to have	Not important	Nice to have	Nice to have	Not important	Nice to have	Not important	Nice to have	Must have	Not important	Nice to have	Not important	Not important	Nice to have	Not important	Not important	Nice to have	Must have	Nice to have	Nice to have
99	As an: Integrated Software ProviderIn order to: Manage binary deliveryI want to: Be able to use the same executable regardless of contract enforcement mode	4	9	15	0.61	Nice to have	Not important	Must have	Not important	Must have	Nice to have	Nice to have	Not important	Not important	Nice to have	Nice to have	Not important	Not important	Nice to have	Not important	Not important	Not important	Nice to have	Not important	Nice to have	Nice to have	Not important	Not important	Must have	Not important	Not important	Not important	Must have	Nice to have	Not important
100	As an: Integrated Software ProviderIn order to: Define “Code Under Test”I want to: Selectively enable checking for a set of functions which could name either an individual function or an overload set	2	15	11	0.68	Nice to have	Not important	Nice to have	Not important	Nice to have	Nice to have	Nice to have	Not important	Nice to have	Nice to have	Nice to have	Nice to have	Nice to have	Nice to have	Not important	Must have	Not important	Nice to have	Must have	Nice to have	Not important	Not important	Not important	Nice to have	Not important	Not important	Not important	Nice to have	Must have	Nice to have
101	As an: Integrated Software ProviderIn order to: Define “Code Under Test”I want to: Selectively enable checking for a set of types and all their members	2	14	12	0.64	Nice to have	Not important	Nice to have	Not important	Nice to have	Nice to have	Nice to have	Not important	Nice to have	Nice to have	Nice to have	Not important	Nice to have	Nice to have	Not important	Nice to have	Not important	Nice to have	Must have	Nice to have	Not important	Not important	Not important	Nice to have	Not important	Not important	Not important	Must have	Must have	Nice to have
102	As an: Integrated Software ProviderIn order to: Define “Code Under Test”I want to: Selectively enable checking for a set of types and all their transitively nested types and members	2	13	13	0.61	Nice to have	Not important	Nice to have	Not important	Nice to have	Nice to have	Nice to have	Not important	Nice to have	Nice to have	Nice to have	Not important	Nice to have	Nice to have	Not important	Nice to have	Not important	Nice to have	Must have	Not important	Not important	Not important	Not important	Nice to have	Not important	Not important	Not important	Must have	Must have	Nice to have
103	As an: Integrated Software ProviderIn order to: Define “Code Under Test”I want to: Selectively enable checking for a translation unit or module and all (non transitive) types and functions within	4	18	6	0.93	Nice to have	Not important	Nice to have	Must have	Nice to have	Nice to have	Nice to have	Nice to have	Nice to have	Nice to have	Nice to have	Nice to have	Nice to have	Nice to have	Nice to have	Nice to have	Not important	Nice to have	Must have	Nice to have	Must have	Nice to have	Not important	Nice to have	Not important	Not important	Not important	Must have	Must have	Nice to have
104	As an: Integrated Software ProviderIn order to: Test final deliverableI want to: Turn off build time checking to remove checking overhead	13	6	9	1.14	Nice to have	Must have	Nice to have	Nice to have	Must have	Must have	Must have	Must have	Not important	Nice to have	Not important	Not important	Must have	Not important	Not important	Must have	Not important	Must have	Not important	Must have	Must have	Not important	Nice to have	Must have	Must have	Nice to have	Not important	Must have	Must have	Must have
105	As an: Integrated Software ProviderIn order to: Test final deliverableI want to: Turn off run time checking to remove checking overhead	21	4	3	1.64	Must have	Must have	Nice to have	Must have	Must have	Must have	Must have	Nice to have	Must have	Must have	Must have	Not important	Must have	Must have	Not important	Must have	Not important	Must have	Must have	Must have	Must have	Must have	Must have	Must have	Must have	Nice to have	Nice to have	Must have	Nice to have	Must have
106	As an: Integrated Software ProviderIn order to: Test final deliverableI want to: Turn on run time optimization to leverage annotation assumptions	12	11	5	1.25	Nice to have	Not important	Nice to have	Nice to have	Must have	Must have	Must have	Nice to have	Nice to have	Must have	Nice to have	Not important	Nice to have	Nice to have	Not important	Must have	Not important	Must have	Must have	Must have	Nice to have	Must have	Nice to have	Not important	Must have	Must have	Nice to have	Must have	Not important	Nice to have
107	As a: C++ Library DeveloperIn order to: Use templatesI want to: Be able to ship header only library	23	4	1	1.79	Must have	Must have	Nice to have	Must have	Must have	Must have	Nice to have	Must have	Must have	Must have	Must have	Not important	Must have	Must have	Must have	Must have	Nice to have	Must have	Must have	Nice to have	Must have	Must have	Must have	Must have	Must have	Must have	Must have	Must have	Must have	Must have
108	As a: C++ Library DeveloperIn order to: Control the tradeoff between need for client recompilation and contract condition visibilityI want to: Insulate contract conditions with the function definition, or insulate only the definition while putting contract conditions on a redeclaration - visible to static analysis tools in all TUs.	6	12	10	0.86	Not important	Not important	Nice to have	Not important	Nice to have	Must have	Must have	Nice to have	Must have	Nice to have	Not important	Not important	Nice to have	Not important	Not important	Nice to have	Not important	Must have	Nice to have	Nice to have	Must have	Nice to have	Not important	Nice to have	Nice to have	Must have	Not important	Nice to have	Nice to have	Not important
109	As a: Library ProviderIn order to: Simplify maintenanceI want to: Not require extra build steps to be documented	6	9	13	0.75	Not important	Not important	Nice to have	Not important	Must have	Not important	Nice to have	Nice to have	Nice to have	Nice to have	Nice to have	Not important	Not important	Not important	Must have	Must have	Must have	Not important	Must have	Not important	Not important	Not important	Nice to have	Not important	Must have	Nice to have	Not important	Nice to have	Nice to have	Not important
110	As a: Library ProviderIn order to: Simplify maintenanceI want to: Not have users complain about my product due to modifications of annotations resulting from their build configuration	4	8	16	0.57	Not important	Not important	Not important	Not important	Must have	Nice to have	Nice to have	Not important	Nice to have	Not important	Must have	Not important	Not important	Not important	Nice to have	Not important	Must have	Must have	Nice to have	Not important	Not important	Not important	Nice to have	Not important	Not important	Not important	Nice to have	Nice to have	Nice to have	Not important
111	As a: Library ProviderIn order to: Support successful integrationI want to: Not require extra build steps to be learned or performed	4	12	12	0.71	Nice to have	Not important	Nice to have	Nice to have	Must have	Not important	Nice to have	Not important	Not important	Not important	Nice to have	Not important	Not important	Nice to have	Must have	Nice to have	Must have	Nice to have	Nice to have	Not important	Not important	Not important	Nice to have	Not important	Must have	Not important	Nice to have	Nice to have	Nice to have	Not important
112	As a: Library ProviderIn order to: Support successful integrationI want to: Not have my users accidentally modify my careful annotations	7	10	11	0.86	Nice to have	Not important	Must have	Not important	Must have	Nice to have	Must have	Nice to have	Nice to have	Not important	Not important	Nice to have	Must have	Nice to have	Not important	Nice to have	Must have	Must have	Not important	Nice to have	Not important	Nice to have	Not important	Not important	Not important	Must have	Nice to have	Not important	Nice to have	Not important
113	As a: Technical ArchitectIn order to: Maintain quality of code baseI want to: Express assertions in a way that does not rely on C macros (i.e., there is no valid technical reason for a programmer not to use the new way, including space, time, tooling, and usability/complexity reasons, compared to C’s assert macro)	9	12	7	1.07	Not important	Nice to have	Nice to have	Nice to have	Must have	Not important	Must have	Nice to have	Nice to have	Not important	Must have	Nice to have	Must have	Nice to have	Nice to have	Nice to have	Nice to have	Must have	Not important	Not important	Not important	Must have	Must have	Must have	Nice to have	Not important	Must have	Nice to have	Must have	Nice to have
114	As a: Technical ArchitectIn order to: Have a consistent and holistic contracts facilityI want to: Specify preconditions/postconditions/assertions/invariants that express my expectations about the expected valid state of my program in the form of compilable boolean expressions, that can be checked statically or dynamically (as opposed to disjointed state where these features are factored into bits)	13	12	2	1.41	Must have	Must have	Nice to have	Not important	Nice to have	Not important	Must have	Nice to have	Must have	Nice to have	Must have	Nice to have	Must have	Nice to have	Nice to have	Must have	Nice to have	Must have	Must have	Must have	Must have	Must have	Nice to have	Must have	Nice to have	Nice to have		Nice to have	Must have	Not important
115	As a: Hardware ArchitectIn order to: Improve system-level performanceI want to: Be able to design new hardware + optimizations, carefully dovetailed into one another, that depend on statically-unprovable facts being annotated in the code	10	10	6	1.15		Must have		Not important	Not important	Not important	Nice to have	Not important	Nice to have	Must have	Must have	Nice to have	Nice to have	Nice to have	Nice to have	Must have	Not important	Must have	Nice to have	Not important	Nice to have	Must have	Must have	Nice to have	Must have	Must have	Nice to have	Must have	Not important	Not important
116	As a: Senior DeveloperIn order to: Set an exampleI want to: Demonstrate best practice in defensive programming	17	8	3	1.50	Nice to have	Must have	Must have	Nice to have	Must have	Must have	Must have	Nice to have	Must have	Must have	Must have	Nice to have	Nice to have	Nice to have	Nice to have	Must have	Must have	Must have	Must have	Not important	Not important	Must have	Nice to have	Must have	Must have	Must have	Not important	Must have	Nice to have	Must have
117	As a: Senior DeveloperIn order to: Enforce code qualityI want to: Discourage reliance on observable out-of-contract behavior by causing check failure to hard stop program or build	14	6	8	1.21	Not important	Must have	Not important	Not important	Must have	Not important	Must have	Nice to have	Must have	Must have	Must have	Nice to have	Nice to have	Must have	Nice to have	Must have	Nice to have	Must have	Must have	Not important	Not important	Must have	Not important	Must have	Must have	Not important	Nice to have	Must have	Must have	Must have
118	As a: Senior DeveloperIn order to: Enforce mature, finalized contractsI want to: Disable continuation on violation of stable and correct individual contracts	17	7	4	1.46	Not important	Must have	Nice to have	Must have	Must have	Must have	Must have	Not important	Must have	Must have	Must have	Nice to have	Nice to have	Nice to have	Nice to have	Must have	Must have	Must have	Must have	Must have	Must have	Must have	Not important	Must have	Nice to have	Not important	Nice to have	Must have	Must have	Must have
119	As a: Senior DeveloperIn order to: Enforce mature, finalized contractsI want to: Disable remapping of semantics on stable and correct individual contracts	8	12	8	1.00	Not important	Must have	Not important	Not important	Must have	Must have	Must have	Not important	Nice to have	Must have	Not important	Nice to have	Nice to have	Nice to have	Nice to have	Nice to have	Nice to have	Must have	Not important	Nice to have	Not important	Must have	Nice to have	Nice to have	Nice to have	Not important	Nice to have	Must have	Must have	Not important
120	As a: Junior DeveloperIn order to: Understand the APII want to: A uniform, fluent description of expected input values, expected output values, side effects, and all logical pre and post conditions	12	15	1	1.39	Must have	Nice to have	Nice to have	Nice to have	Must have	Nice to have	Nice to have	Nice to have	Nice to have	Must have	Must have	Nice to have	Nice to have	Must have	Nice to have	Must have	Must have	Must have	Nice to have	Nice to have	Nice to have	Must have	Nice to have	Must have	Must have	Not important	Must have	Nice to have	Must have	Must have
121	As a: Junior DeveloperIn order to: Understand the APII want to: Be informed when my usage is out of contract	19	9	0	1.68	Must have	Nice to have	Nice to have	Must have	Must have	Must have	Nice to have	Nice to have	Must have	Must have	Must have	Nice to have	Must have	Must have	Nice to have	Must have	Nice to have	Must have	Must have	Must have	Must have	Must have	Must have	Must have	Must have	Nice to have	Nice to have	Must have	Must have	Must have
122	As a: Junior DeveloperIn order to: Understand the programI want to: Know why my software is not building	19	6	3	1.57	Must have	Must have	Nice to have	Must have	Must have	Must have	Nice to have	Not important	Must have	Must have	Must have	Nice to have	Must have	Must have	Nice to have	Must have	Must have	Nice to have	Must have	Must have	Nice to have	Must have	Not important	Must have	Must have	Not important	Must have	Must have	Must have	Must have
123	As a: Junior DeveloperIn order to: Understand the programI want to: Know why my software is aborting	18	9	1	1.61	Must have	Must have	Nice to have	Nice to have	Must have	Must have	Nice to have	Nice to have	Must have	Must have	Must have	Nice to have	Must have	Must have	Nice to have	Must have	Must have	Must have	Must have	Must have	Nice to have	Must have	Nice to have	Must have	Must have	Not important	Nice to have	Must have	Must have	Must have
124	As a: Junior DeveloperIn order to: Understand the programI want to: Know why my software is out of contract	16	11	1	1.54	Must have	Must have	Nice to have	Must have	Must have	Nice to have	Nice to have	Nice to have	Nice to have	Must have	Must have	Nice to have	Must have	Nice to have	Nice to have	Must have	Must have	Must have	Must have	Not important	Nice to have	Must have	Must have	Must have	Must have	Nice to have	Nice to have	Must have	Must have	Must have
125	As a: Junior DeveloperIn order to: Understand the programI want to: Know that my program or build was halted due to contract violation	21	7	0	1.75	Must have	Must have	Must have	Nice to have	Must have	Must have	Must have	Nice to have	Must have	Must have	Must have	Nice to have	Must have	Must have	Nice to have	Must have	Must have	Must have	Must have	Must have	Nice to have	Must have	Nice to have	Must have	Must have	Must have	Nice to have	Must have	Must have	Must have
126	As a: Junior DeveloperIn order to: Understand the facilityI want to: Be able to build a program with contracts after reasonably short tutorial	14	11	3	1.39	Must have	Must have	Must have	Nice to have	Must have	Must have	Must have	Not important	Must have	Must have	Must have	Nice to have	Nice to have	Nice to have	Must have	Nice to have	Nice to have	Nice to have	Must have	Nice to have	Not important	Nice to have	Must have	Must have	Must have	Not important	Nice to have	Nice to have	Nice to have	Not important
127	As a: Junior DeveloperIn order to: Understand the facilityI want to: Have keywords with precise and unambiguous meanings	14	12	2	1.43	Nice to have	Must have	Not important	Nice to have	Must have	Must have	Must have	Nice to have	Must have	Must have	Must have	Nice to have	Nice to have	Nice to have	Must have	Nice to have	Must have	Nice to have	Must have	Must have	Nice to have	Nice to have	Nice to have	Nice to have	Must have	Not important	Must have	Must have	Nice to have	Must have
128	As a: Junior DeveloperIn order to: Improve my codeI want to: Learn about software best practices by example	12	12	4	1.29	Nice to have	Must have	Nice to have	Nice to have	Must have	Must have	Must have	Nice to have	Nice to have	Must have	Must have	Nice to have	Nice to have	Not important	Must have	Must have	Nice to have	Nice to have	Must have	Not important	Not important	Must have	Nice to have	Nice to have	Must have	Not important	Must have	Nice to have	Must have	Must have
129	As an: Agile DeveloperIn order to: Iterate quicklyI want to: Be able to write and modify contracts quickly without heavy boiler plate or up front cost	13	14	1	1.43	Must have	Must have	Nice to have	Nice to have	Must have	Nice to have	Nice to have	Nice to have	Must have	Must have	Must have	Nice to have	Nice to have	Nice to have	Must have	Nice to have	Must have	Must have	Must have	Nice to have	Nice to have	Must have	Nice to have	Nice to have	Must have	Not important	Must have	Nice to have	Must have	Must have
130	As an: Agile DeveloperIn order to: Safeguard evolving codeI want to: Assert against conditions I am aware of but not finished handling fully	9	11	8	1.04	Nice to have	Must have	Nice to have	Not important	Nice to have	Not important	Nice to have	Must have	Nice to have	Must have	Not important	Nice to have	Must have	Nice to have	Must have	Must have	Nice to have	Must have	Must have	Nice to have	Not important	Must have	Nice to have	Not important	Nice to have	Not important	Not important	Not important	Must have	Nice to have
131	As a: Business DeveloperIn order to: Maintain confidentialityI want to: Not expose diagnostic information (source location, expressions, etc.) in the software I deliver to clients, even when I choose to have contracts enforced in the software I deliver	5	11	12	0.75	Nice to have	Not important	Not important	Must have	Not important	Nice to have	Not important	Nice to have	Must have	Nice to have	Must have	Nice to have	Nice to have	Must have	Must have	Not important	Not important	Nice to have	Nice to have	Not important	Not important	Not important	Not important	Not important	Nice to have	Not important	Nice to have	Nice to have	Not important	Not important
132	As a: Performance Sensitive DeveloperIn order to: Enable better performanceI want to: Annotate my code with assumptions, likelihoods, or reachability information that a tool might not be able to deduce, but that I would be confident of	13	9	6	1.25	Nice to have	Must have	Must have	Nice to have	Must have	Not important	Not important	Nice to have	Nice to have	Must have	Not important	Nice to have	Nice to have	Nice to have	Not important	Must have	Not important	Must have	Must have	Not important	Must have	Must have	Must have	Nice to have	Must have	Must have	Nice to have	Must have	Not important	Nice to have
133	As a: Performance Sensitive DeveloperIn order to: Enable better performanceI want to: Be able to give statically-unprovable facts to current and novel optimizers in terms of semantics my program does not depend-on but optimizers can’t figure out	13	10	5	1.29	Nice to have	Must have	Must have	Not important	Must have	Not important	Not important	Nice to have	Not important	Must have	Nice to have	Nice to have	Nice to have	Nice to have	Nice to have	Must have	Not important	Must have	Must have	Must have	Nice to have	Must have	Must have	Nice to have	Must have	Must have	Nice to have	Must have	Not important	Nice to have
134	As a: Performance Sensitive DeveloperIn order to: Enable better performanceI want to: Accept responsibility for a malformed program that might result from eventually false information given by my annotations	15	7	6	1.32	Must have	Must have	Not important	Must have	Must have	Not important	Not important	Nice to have	Not important	Must have	Nice to have	Nice to have	Nice to have	Nice to have	Must have	Must have	Not important	Nice to have	Must have	Must have	Must have	Must have	Must have	Not important	Must have	Must have	Nice to have	Must have	Not important	Nice to have
135	As a: Performance Sensitive DeveloperIn order to: Have safety critical pathsI want to: Isolate safety checks from performance annotations	11	11	6	1.18	Must have	Must have	Nice to have	Not important	Nice to have	Not important	Must have	Must have	Not important	Must have	Must have	Nice to have	Must have	Must have	Not important	Nice to have	Nice to have	Nice to have	Nice to have	Nice to have	Must have	Not important	Nice to have	Not important	Nice to have	Must have	Nice to have	Must have	Not important	Must have
136	As a: Performance Sensitive DeveloperIn order to: Have safety critical pathsI want to: Retain checking even when optimizing with performance annotations	13	8	7	1.21	Must have	Must have	Must have	Not important	Nice to have	Must have	Must have	Must have	Not important	Must have	Not important	Nice to have	Must have	Not important	Not important	Must have	Nice to have	Nice to have	Must have	Nice to have	Must have	Not important	Nice to have	Must have	Nice to have	Not important	Nice to have	Must have	Must have	Not important
137	As a: Quality Sensitive DeveloperIn order to: Enable full checkingI want to: Ensure all checks (pre, post, assert, invariant) are enabled	16	10	2	1.50	Must have	Must have	Must have	Nice to have	Nice to have	Must have	Must have	Must have	Nice to have	Must have	Nice to have	Nice to have	Not important	Must have	Must have	Must have	Must have	Nice to have	Nice to have	Nice to have	Not important	Must have	Nice to have	Must have	Must have	Must have	Nice to have	Must have	Must have	Must have
138	As a: Quality Sensitive DeveloperIn order to: Validate correctnessI want to: Signify the predicates that should be verified by an analysis tool	4	18	6	0.93	Nice to have	Must have	Nice to have	Nice to have	Nice to have	Not important	Not important	Nice to have	Nice to have	Nice to have	Must have	Not important	Nice to have	Nice to have	Not important	Nice to have	Nice to have	Must have	Nice to have	Nice to have	Nice to have	Must have	Nice to have	Nice to have	Not important	Not important	Nice to have	Nice to have	Nice to have	Must have
139	As a: Quality Sensitive DeveloperIn order to: Manage multiple toolsI want to: Signify subset of individual annotations to be consumed by a specific kind of verification tool	1	14	13	0.57	Nice to have	Nice to have	Nice to have	Nice to have	Nice to have	Not important	Not important	Nice to have	Nice to have	Not important	Nice to have	Not important	Nice to have	Nice to have	Not important	Nice to have	Not important	Must have	Nice to have	Not important	Nice to have	Nice to have	Not important	Not important	Not important	Not important	Not important	Not important	Must have	Not important
140	As a: Quality Sensitive DeveloperIn order to: Manage multiple toolsI want to: Signify subset of individual annotations to be consumed by a specific instance of verification tool	1	14	13	0.57	Nice to have	Nice to have	Nice to have	Nice to have	Nice to have	Not important	Not important	Nice to have	Nice to have	Not important	Nice to have	Not important	Nice to have	Nice to have	Not important	Nice to have	Not important	Must have	Nice to have	Not important	Nice to have	Nice to have	Not important	Not important	Not important	Not important	Not important	Not important	Nice to have	Not important
141	As a: Quality Sensitive DeveloperIn order to: Manage multiple toolsI want to: Use predicates that may not be understood by all instances of verification	9	12	7	1.07	Nice to have	Must have	Must have	Not important	Nice to have	Must have	Not important	Nice to have	Nice to have	Nice to have	Must have	Not important	Nice to have	Nice to have	Not important	Must have	Not important	Must have	Nice to have	Nice to have	Must have	Must have	Nice to have	Not important	Nice to have	Must have	Not important	Nice to have	Not important	Not important
142	As a: Quality Sensitive DeveloperIn order to: Manage multiple toolsI want to: Use predicates that may not be understood by all kinds of verification	9	12	7	1.07	Nice to have	Must have	Must have	Not important	Nice to have	Must have	Not important	Nice to have	Nice to have	Nice to have	Must have	Not important	Nice to have	Nice to have	Not important	Must have	Not important	Must have	Nice to have	Nice to have	Must have	Must have	Nice to have	Not important	Nice to have	Must have	Not important	Nice to have	Not important	Must have
143	As a: Quality Sensitive DeveloperIn order to: Manage multiple toolsI want to: Integrate the results of that static checker into how my program behaves in different ways: assume proven predicates, make unprovable predicates ill- formed, etc.	4	10	14	0.64	Not important	Nice to have	Not important	Not important	Nice to have	Not important	Not important	Not important	Must have	Nice to have	Not important	Not important	Nice to have	Must have	Not important	Nice to have	Not important	Must have	Must have	Nice to have	Nice to have	Nice to have	Nice to have	Not important	Not important	Not important	Not important	Nice to have	Not important	Nice to have
144	As a: Quality Sensitive DeveloperIn order to: Unit test predicatesI want to: Override failure handler to trigger test failure instead of termination	12	8	8	1.14	Must have	Nice to have	Must have	Nice to have	Must have	Not important	Must have	Must have	Nice to have	Must have	Nice to have	Not important	Must have	Not important	Not important	Must have	Nice to have	Nice to have	Must have	Must have	Must have	Not important	Nice to have	Not important	Not important	Not important	Nice to have	Must have	Nice to have	Must have
145	As a: Quality Sensitive DeveloperIn order to: Unit test violation handlersI want to: Have a way to run handler on all combinations of available build modes	5	12	11	0.79	Must have	Nice to have	Nice to have	Not important	Nice to have	Not important	Nice to have	Nice to have	Nice to have	Must have	Nice to have	Not important	Nice to have	Not important	Not important	Must have	Nice to have	Not important	Must have	Nice to have	Not important	Not important	Nice to have	Not important	Nice to have	Not important	Not important	Must have	Nice to have	Must have
146	As a: Quality Sensitive DeveloperIn order to: Catch unexpected failure modesI want to: Log all predicate failure during fuzz testing	11	12	5	1.21	Nice to have	Nice to have	Not important	Must have	Nice to have	Must have	Nice to have	Must have	Nice to have	Must have	Nice to have	Not important	Must have	Must have	Not important	Nice to have	Nice to have	Nice to have	Must have	Not important	Must have	Must have	Nice to have	Nice to have	Must have	Not important	Nice to have	Must have	Nice to have	Nice to have
147	As a: Critical Software DeveloperIn order to: Have a verifiable release systemI want to: Be able to control the configuration of contracts from a central point	10	14	4	1.21	Nice to have	Nice to have	Must have	Not important	Nice to have	Must have	Must have	Must have	Not important	Nice to have	Must have	Not important	Nice to have	Nice to have	Must have	Nice to have	Nice to have	Not important	Must have	Nice to have	Must have	Nice to have	Nice to have	Nice to have	Must have	Nice to have	Nice to have	Must have	Nice to have	Must have
148	As a: Critical Software DeveloperIn order to: Avoid undefined behaviorI want to: Have contract violation at run-time always have well-defined behavior	7	4	17	0.64	Must have	Not important	Must have	Not important	Not important	Nice to have	Not important	Not important	Not important	Must have	Not important	Not important	Not important	Nice to have	Must have	Not important	Must have	Not important	Must have	Nice to have	Not important	Not important	Nice to have	Must have	Not important	Not important	Not important	Not important	Must have	Must have
149	As a: Critical Software DeveloperIn order to: Not have a faulty program lead to catastrophic failureI want to: Have access to a recovery path after contract violation	6	7	15	0.68	Must have	Must have	Nice to have	Nice to have	Not important	Must have	Not important	Nice to have	Not important	Must have	Not important	Nice to have	Not important	Not important	Not important	Not important	Not important	Not important	Nice to have	Nice to have	Must have	Not important	Not important	Nice to have	Not important	Not important	Not important	Must have	Nice to have	Must have
150	As a: Critical Software DeveloperIn order to: Not have a faulty program lead to catastrophic failureI want to: Be able to express error handling that may be redundant with contract checking	9	8	11	0.93	Must have	Must have	Nice to have	Must have	Not important	Must have	Must have	Must have	Not important	Nice to have	Not important	Not important	Must have	Not important	Not important	Nice to have	Nice to have	Not important	Must have	Not important	Must have	Not important	Nice to have	Nice to have	Not important	Not important	Nice to have	Nice to have	Must have	Must have
151	As a: Critical Software DeveloperIn order to: Not have a faulty program lead to catastrophic failureI want to: Not have contract build or run modes possibly be able to change or disable related error handling in any way	10	5	13	0.89	Must have	Must have	Not important	Not important	Not important	Must have	Must have	Must have	Not important	Nice to have	Must have	Not important	Must have	Not important	Must have	Nice to have	Nice to have	Not important	Nice to have	Not important	Must have	Not important	Not important	Must have	Not important	Not important	Nice to have	Not important	Must have	Must have
152	As a: Critical Software DeveloperIn order to: Be assured a critical violation uses a critical recovery pathI want to: Couple recovery path to a specific contract within the source	4	6	18	0.50	Nice to have	Nice to have	Not important	Not important	Not important	Not important	Nice to have	Must have	Not important	Must have	Not important	Nice to have	Not important	Not important	Not important	Not important	Not important	Not important	Must have	Nice to have	Not important	Not important	Not important	Nice to have	Not important	Not important	Not important	Must have	Not important	Must have
153	As a: Critical Software DeveloperIn order to: Meet code coverage requirementsI want to: Be able to run both success and failure branches in my test environment	10	10	8	1.07	Nice to have	Nice to have	Nice to have	Not important	Nice to have	Must have	Must have	Nice to have	Not important	Must have	Nice to have	Must have	Not important	Nice to have	Must have	Must have	Not important	Not important	Must have	Not important	Must have	Must have	Not important	Nice to have	Not important	Nice to have	Nice to have	Must have	Nice to have	Must have
154	As a: Critical Software DeveloperIn order to: Have redundant layeringI want to: Be able to continue to run checks in a production environment (even after formal testing is complete)	14	7	6	1.30	Must have	Nice to have	Must have	Must have	Nice to have	Must have	Must have	Nice to have	Not important	Must have	Nice to have	Not important	Must have	Nice to have	Not important	Must have		Not important	Must have	Nice to have	Must have	Must have	Not important	Must have	Must have	Not important	Nice to have	Must have	Nice to have	Must have
155	As a: Critical Software DeveloperIn order to: Maximize coverageI want to: Be able to run checks in a production environment that are considered “cheap” compared to the expected cost of entering an invalid state	10	13	5	1.18	Nice to have	Nice to have	Nice to have	Nice to have	Nice to have	Must have	Must have	Must have	Not important	Must have	Nice to have	Not important	Must have	Nice to have	Not important	Must have	Nice to have	Not important	Must have	Nice to have	Nice to have	Must have	Nice to have	Must have	Nice to have	Not important	Nice to have	Must have	Not important	Must have
156	As a: Critical Software DeveloperIn order to: Avoid unexpected or undefined behaviorI want to: Ensure checks will never be __assume’d/__builtin_assume’d by the compiler as if they were facts injected into the program (otherwise, if such an assumption ever failed, I would be running a different program that is not equivalent to the one I wrote; assumptions can expand the set of possible executions by injecting facts not otherwise knowable to the compiler)	10	5	13	0.89	Must have	Nice to have	Must have	Not important	Must have	Nice to have	Must have	Must have	Not important	Must have	Nice to have	Not important	Must have	Not important	Must have	Nice to have	Not important	Not important	Not important	Nice to have	Must have	Not important	Not important	Must have	Not important	Not important	Not important	Not important	Must have	Must have
157	As a: Security Sensitive DeveloperIn order to: Limit attack vectorsI want to: Be unable to insert code paths (eg. violation handlers) at run time (eg. build time only)	11	8	8	1.11	Must have	Not important	Nice to have	Must have	Must have	Not important	Must have	Must have	Nice to have	Nice to have	Must have	Nice to have	Nice to have	Nice to have	Not important	Must have	Must have	Not important	Not important	Must have	Must have	Not important	Not important	Must have	Nice to have	Not important		Nice to have	Must have	Nice to have
158	As a: Security Sensitive DeveloperIn order to: Deliver a certified productI want to: Have build tool only link to a preapproved violation handler	2	14	12	0.64	Nice to have	Not important	Nice to have	Nice to have	Not important	Not important	Nice to have	Nice to have	Nice to have	Nice to have	Not important	Nice to have	Nice to have	Not important	Not important	Nice to have	Must have	Not important	Not important	Not important	Must have	Not important	Not important	Nice to have	Nice to have	Not important	Nice to have	Nice to have	Must have	Nice to have
159	As a: User of Analysis ToolsIn order to: Improve runtime correctnessI want to: Have runtime checks generated by the tool	6	13	8	0.93	Nice to have	Nice to have		Not important	Not important	Not important	Not important	Nice to have	Nice to have	Nice to have	Nice to have	Nice to have	Nice to have	Nice to have	Nice to have	Nice to have	Nice to have	Nice to have	Must have	Not important	Must have	Must have	Not important	Must have	Not important	Must have	Not important	Must have	Must have	Nice to have
160	As a: User of Analysis ToolsIn order to: Improve runtime performanceI want to: Have runtime optimizations generated by the tool	5	16	6	0.96	Nice to have	Nice to have		Not important	Not important	Nice to have	Not important	Nice to have	Nice to have	Must have	Nice to have	Nice to have	Nice to have	Nice to have	Not important	Nice to have	Nice to have	Nice to have	Must have	Nice to have	Nice to have	Must have	Nice to have	Nice to have	Not important	Must have	Not important	Must have	Not important	Nice to have
161	As a: User of Analysis ToolsIn order to: Allow symbolic analysisI want to: Have symbolic proofs for soundness and consistency performed before compile time	4	18	5	0.96	Nice to have	Nice to have		Nice to have	Nice to have	Nice to have	Not important	Nice to have	Nice to have	Nice to have	Must have	Not important	Nice to have	Nice to have	Nice to have	Nice to have	Nice to have	Must have	Must have	Nice to have	Nice to have	Must have	Not important	Not important	Not important	Nice to have	Nice to have	Nice to have	Nice to have	Nice to have
162	As a: User of Analysis ToolsIn order to: Allow code analysisI want to: Have code source, AST, or instruction inspection during compile time	4	15	8	0.85	Must have	Nice to have		Nice to have	Not important	Not important	Not important	Must have	Nice to have	Nice to have	Must have	Not important	Nice to have	Not important	Not important	Nice to have	Nice to have	Not important	Nice to have	Nice to have	Nice to have	Must have	Nice to have	Nice to have	Not important	Nice to have	Nice to have	Nice to have	Nice to have	Nice to have
163	As a: User of Analysis ToolsIn order to: Allow binary analysisI want to: Have binary inspection after compile time	2	8	17	0.44	Nice to have	Nice to have		Nice to have	Not important	Not important	Not important	Nice to have	Nice to have	Nice to have	Must have	Not important	Not important	Not important	Not important	Nice to have	Not important	Not important	Not important	Not important	Not important	Must have	Not important	Nice to have	Not important	Not important	Not important	Not important	Nice to have	Nice to have
164	As a: User of Analysis ToolsIn order to: Improve the quality of analysisI want to: Be able to hint to the analyzer information it may be unable to deduce from source code alone (eg. 5 / opaque(); [[ opaque() != 0]])	5	17	5	1.00	Nice to have	Nice to have		Not important	Nice to have	Not important	Not important	Nice to have	Nice to have	Nice to have	Must have	Not important	Nice to have	Nice to have	Nice to have	Must have	Nice to have	Not important	Nice to have	Must have	Nice to have	Nice to have	Nice to have	Nice to have	Must have	Nice to have	Nice to have	Must have	Not important	Must have
165	As a: Provider of Analysis ToolsIn order to: Extend my existing engineI want to: Be able to map pre-existing contract features in tools to a standardized language syntax	5	10	12	0.74	Not important	Nice to have		Not important	Not important	Not important	Not important	Nice to have	Nice to have	Nice to have	Must have	Nice to have	Not important	Must have	Not important	Not important	Nice to have	Not important	Must have	Nice to have	Nice to have	Nice to have	Nice to have	Not important	Must have	Not important	Not important	Must have	Not important	Not important
166	As a: TeacherIn order to: Demonstrate best practiceI want to: Be able to express defensive programming, programming by contract, and test driven development to introductory students	14	12	2	1.43	Nice to have	Must have	Must have	Must have	Must have	Must have	Must have	Must have	Must have	Must have	Must have	Nice to have	Nice to have	Nice to have	Nice to have	Nice to have	Nice to have	Nice to have	Must have	Nice to have	Not important	Must have	Nice to have	Nice to have	Must have	Not important	Nice to have	Must have	Must have	Nice to have
167	As a: TeacherIn order to: Demonstrate best practiceI want to: Not rely on custom libraries or proprietary extensions	13	12	3	1.36	Nice to have	Must have	Nice to have	Nice to have	Must have	Nice to have	Must have	Must have	Must have	Nice to have	Must have	Nice to have	Nice to have	Nice to have	Must have	Nice to have	Must have	Nice to have	Nice to have	Not important	Must have	Not important	Must have	Must have	Must have	Not important	Must have	Nice to have	Must have	Must have
168	As a: TeacherIn order to: Demonstrate best practiceI want to: Demonstrate mock lifecycle by switching simple compiler flags to control which checks are enabled	6	18	4	1.07	Not important	Must have	Nice to have	Nice to have	Nice to have	Must have	Must have	Nice to have	Nice to have	Must have	Nice to have	Nice to have	Nice to have	Nice to have	Not important	Nice to have	Nice to have	Nice to have	Must have	Not important	Nice to have	Nice to have	Nice to have	Nice to have	Must have	Not important	Nice to have	Nice to have	Nice to have	Not important
169	As a: TeacherIn order to: Manage many studentsI want to: Have examples compilable by a standard compiler on any system	22	3	3	1.68	Nice to have	Must have	Must have	Must have	Must have	Must have	Must have	Must have	Must have	Nice to have	Must have	Not important	Must have	Must have	Must have	Must have	Must have	Not important	Must have	Not important	Must have	Must have	Nice to have	Must have	Must have	Must have	Must have	Must have	Must have	Not important
170	As a: TeacherIn order to: Manage many studentsI want to: Have examples that are easy to build without digression into build systems	14	9	5	1.32	Must have	Must have	Must have	Nice to have	Must have	Must have	Nice to have	Not important	Nice to have	Nice to have	Must have	Nice to have	Nice to have	Nice to have	Must have	Not important	Must have	Not important	Must have	Not important	Must have	Must have	Nice to have	Must have	Must have	Not important	Must have	Nice to have	Must have	Not important
171	As a: TeacherIn order to: Build layers of understandingI want to: Have simple explanation of assertions and their use to support simple programming tasks, including debugging erroneous programs.	17	9	2	1.54	Nice to have	Must have	Must have	Nice to have	Must have	Must have	Must have	Not important	Must have	Nice to have	Must have	Nice to have	Must have	Nice to have	Must have	Must have	Nice to have	Not important	Must have	Must have	Nice to have	Must have	Must have	Must have	Must have	Nice to have	Must have	Nice to have	Must have	Not important
172	As a: TeacherIn order to: Build layers of understandingI want to: Support the ability for advanced uses of contracts to be distributed across many different courses in a C++-focused computer science curriculum.	9	14	5	1.14	Nice to have	Must have	Not important	Not important	Nice to have	Must have	Must have	Nice to have	Must have	Nice to have	Must have	Nice to have	Must have	Nice to have	Not important	Must have	Nice to have	Nice to have	Must have	Not important	Nice to have	Must have	Nice to have	Nice to have	Nice to have	Not important	Nice to have	Nice to have	Nice to have	Not important
173	As a: Compiler DeveloperIn order to: Deliver best experience to my customersI want to: Maximize implementation freedom by limiting what is strictly required by the standard	6	12	10	0.86	Not important	Must have	Not important	Nice to have	Nice to have	Not important	Not important	Nice to have	Nice to have	Nice to have	Must have	Nice to have	Must have	Nice to have	Nice to have	Nice to have	Not important	Not important	Not important	Nice to have	Nice to have	Must have	Nice to have	Not important	Must have	Not important	Not important	Must have	Not important	Not important
174	As a: Compiler DeveloperIn order to: Deliver the best implementationI want to: Have a clear and simple specification that meets clear need	18	10	0	1.64	Must have	Must have	Nice to have	Nice to have	Must have	Nice to have	Must have	Nice to have	Nice to have	Nice to have	Must have	Nice to have	Must have	Nice to have	Must have	Must have	Must have	Must have	Must have	Nice to have	Must have	Must have	Nice to have	Must have	Must have	Must have	Must have	Must have	Must have	Not important
175	As a: Large Codebase DeveloperIn order to: Debug complex issuesI want to: Have composible and fine grained control over which checks are run, without requiring source code changes. Specifically the checks for only one function or some grouping of functions	9	14	5	1.14	Nice to have	Must have	Nice to have	Nice to have	Nice to have	Must have	Must have	Must have	Nice to have	Must have	Nice to have	Not important	Nice to have	Nice to have	Nice to have	Must have	Not important	Must have	Must have	Nice to have	Nice to have	Nice to have	Nice to have	Nice to have	Not important	Not important	Not important	Must have	Must have	Must have
176	As a: Large Codebase DeveloperIn order to: Enable/Disable checking on critical/hot pathsI want to: Control whether checks are run based on where they are being called from	6	13	9	0.89	Nice to have	Must have	Nice to have	Nice to have	Not important	Nice to have	Nice to have	Nice to have	Nice to have	Must have	Nice to have	Not important	Nice to have	Nice to have	Not important	Must have	Not important	Must have	Must have	Not important	Nice to have	Nice to have	Not important	Not important	Not important	Nice to have	Not important	Must have	Must have	Must have
177	As a: Large Codebase OwnerIn order to: Modernize my code baseI want to: Introduce standardized contracts to replace my macro-based contracts	15	12	1	1.50	Must have	Nice to have	Nice to have	Must have	Nice to have	Nice to have	Must have	Nice to have	Must have	Nice to have	Must have	Not important	Nice to have	Must have	Must have	Nice to have	Nice to have	Must have	Must have	Must have	Nice to have	Must have	Nice to have	Must have	Must have	Must have	Must have	Nice to have	Must have	Must have
178	As a: Large Codebase OwnerIn order to: Modernize my code baseI want to: Have my existing macro-based facilities interoperate smoothly with standardized contracts so I can do the migration gradually	8	15	5	1.11	Must have	Nice to have	Must have	Nice to have	Not important	Must have	Nice to have	Nice to have	Nice to have	Must have	Nice to have	Nice to have	Nice to have	Not important	Nice to have	Nice to have	Not important	Must have	Must have	Nice to have	Must have	Must have	Nice to have	Nice to have	Nice to have	Not important	Not important	Nice to have	Nice to have	Must have
179	As a: Large Codebase OwnerIn order to: Introduce new contracts into an existing systemI want to: Have failed individual checks from existing code optionally warn instead of hard stop	13	9	6	1.25	Nice to have	Nice to have	Must have	Must have	Nice to have	Must have	Must have	Must have	Must have	Must have	Nice to have	Nice to have	Must have	Not important	Not important	Must have	Not important	Not important	Must have	Must have	Must have	Not important	Nice to have	Nice to have	Nice to have	Not important	Nice to have	Must have	Not important	Must have
180	As a: Large Codebase OwnerIn order to: Introduce new contracts into an existing systemI want to: Have failed checks from a new library optionally warn instead of hard stop	13	9	6	1.25	Nice to have	Nice to have	Must have	Must have	Nice to have	Must have	Must have	Must have	Must have	Must have	Nice to have	Nice to have	Must have	Not important	Not important	Must have	Not important	Not important	Must have	Must have	Must have	Not important	Nice to have	Nice to have	Nice to have	Not important	Nice to have	Must have	Not important	Must have
181	As a: Large Codebase OwnerIn order to: Introduce new parameters or invariants into a contracts based systemI want to: Be able to include distinct clauses for each parameter or invariant with their own individual failure or build controls	5	8	15	0.64	Not important	Not important	Nice to have	Nice to have	Not important	Not important	Nice to have	Nice to have	Must have	Must have	Nice to have	Nice to have	Nice to have	Not important	Not important	Must have	Not important	Nice to have	Must have	Not important	Not important	Not important	Not important	Not important	Not important	Not important	Not important	Must have	Not important	Not important
182	As a: Large Codebase OwnerIn order to: Introduce new elements into a contracts based systemI want to: Have failed checks caused by a change in environment optionally warn instead of hard stop	6	13	9	0.89	Nice to have	Nice to have	Nice to have	Nice to have	Nice to have	Not important	Must have	Nice to have	Nice to have	Nice to have	Not important	Nice to have	Must have	Not important	Not important	Nice to have	Not important	Not important	Must have	Must have	Must have	Not important	Not important	Nice to have	Nice to have	Not important	Nice to have	Must have	Not important	Must have
183	As a: Large Codebase OwnerIn order to: Introduce new elements into a contracts based systemI want to: Have failed checks caused by a change in compiler optionally warn instead of hard stop	5	15	8	0.89	Nice to have	Nice to have	Nice to have	Nice to have	Nice to have	Not important	Must have	Nice to have	Nice to have	Nice to have	Nice to have	Nice to have	Must have	Not important	Not important	Nice to have	Not important	Not important	Must have	Must have	Not important	Not important	Nice to have	Nice to have	Nice to have	Not important	Nice to have	Must have	Not important	Not important
184	As a: Large Codebase OwnerIn order to: Prevent regressionsI want to: Have trusted contracts fail fast and hard stop	15	11	2	1.46	Nice to have	Must have	Must have	Nice to have	Nice to have	Must have	Must have	Must have	Must have	Must have	Nice to have	Not important	Nice to have	Nice to have	Must have	Must have	Nice to have	Must have	Must have	Must have	Must have	Must have	Nice to have	Nice to have	Nice to have	Not important	Nice to have	Must have	Must have	Must have
185	As a: Large Codebase OwnerIn order to: Scale violation handlingI want to: Be able to log violations in my organization specific format	13	10	5	1.29	Nice to have	Must have	Nice to have	Nice to have	Must have	Must have	Must have	Must have	Must have	Must have	Nice to have	Nice to have	Must have	Nice to have	Not important	Must have	Not important	Nice to have	Must have	Not important	Must have	Not important	Nice to have	Nice to have	Must have	Not important	Nice to have	Must have	Nice to have	Must have
186	As a: Large Codebase OwnerIn order to: Allow simulation or post-mortem testing of known failure modesI want to: Optionally disable checking on a subset of individual annotations	8	10	10	0.93	Not important	Not important	Nice to have	Nice to have	Not important	Must have	Nice to have	Nice to have	Nice to have	Must have	Nice to have	Nice to have	Nice to have	Nice to have	Not important	Must have	Not important	Must have	Must have	Must have	Must have	Not important	Not important	Not important	Not important	Not important	Nice to have	Must have	Must have	Must have
187	As a: Large Codebase OwnerIn order to: Allow simulation or post-mortem testing of known failure modesI want to: Optionally allow checking of a subset of individual annotations to fail and access its recovery path	7	8	13	0.79	Not important	Not important	Not important	Nice to have	Not important	Must have	Nice to have	Nice to have	Nice to have	Must have	Nice to have	Nice to have	Nice to have	Not important	Not important	Must have	Not important	Must have	Must have	Not important	Must have	Not important	Not important	Not important	Not important	Not important	Nice to have	Must have	Nice to have	Must have
188	As a: Large Codebase OwnerIn order to: Allow simulation or post-mortem testing of known failure modesI want to: Optionally allow checking of a subset of individual annotations to fail and continue failing	6	9	13	0.75	Not important	Not important	Nice to have	Nice to have	Not important	Must have	Nice to have	Nice to have	Nice to have	Must have	Nice to have	Nice to have	Nice to have	Nice to have	Not important	Must have	Not important	Not important	Must have	Not important	Must have	Not important	Not important	Not important	Not important	Not important	Not important	Must have	Not important	Must have
189	As a: Large Codebase OwnerIn order to: Manage performance costI want to: Constrain the set of built time checks according to their performance overhead	5	12	11	0.79	Not important	Not important	Not important	Nice to have	Nice to have	Must have	Must have	Must have	Nice to have	Nice to have	Nice to have	Nice to have	Nice to have	Must have	Not important	Not important	Not important	Not important	Must have	Nice to have	Nice to have	Nice to have	Not important	Not important	Nice to have	Not important	Not important	Nice to have	Not important	Not important
190	As a: Large Codebase OwnerIn order to: Manage performance costI want to: Constrain the set of runtime checks according to their performance overhead	12	11	5	1.25	Not important	Not important	Nice to have	Nice to have	Must have	Must have	Must have	Must have	Must have	Must have	Nice to have	Nice to have	Nice to have	Must have	Nice to have	Must have	Not important	Not important	Must have	Nice to have	Nice to have	Must have	Nice to have	Not important	Must have	Nice to have	Nice to have	Must have	Not important	Must have
191	As a: Large Codebase OwnerIn order to: Tune contract width in complex systemI want to: Be able to narrow individual contract so it fails in testing not in production	6	11	11	0.82	Not important	Not important	Not important	Not important	Nice to have	Must have	Nice to have	Nice to have	Nice to have	Must have	Nice to have	Must have	Nice to have	Nice to have	Nice to have	Nice to have	Not important	Not important	Must have	Not important	Nice to have	Must have	Not important	Nice to have	Not important	Not important	Not important	Must have	Nice to have	Nice to have
192	As a: Small Machine DeveloperIn order to: Minimize executable footprintI want to: Remove all checking and diagnostic (eg. source location) overhead entirely from the final binary	17	7	4	1.46	Nice to have	Must have	Must have	Must have	Must have	Must have	Must have	Must have	Must have	Must have	Must have	Not important	Must have	Must have	Must have	Must have	Nice to have	Nice to have	Nice to have	Must have	Must have	Must have	Not important	Not important	Nice to have	Not important	Nice to have	Nice to have	Must have	Must have
193	As a: Small Machine DeveloperIn order to: Minimize executable footprintI want to: Remove all logging and diagnostic (but not checking) overhead from the final binary	10	13	4	1.22	Nice to have	Must have		Nice to have	Must have	Must have	Must have	Must have	Nice to have	Must have	Nice to have	Nice to have	Nice to have	Nice to have	Must have	Must have	Not important	Must have	Nice to have	Nice to have	Must have	Not important	Not important	Nice to have	Nice to have	Not important	Nice to have	Nice to have	Nice to have	Must have
194	As a: Small Machine DeveloperIn order to: Minimize executable footprintI want to: Remove all but the most important diagnostic overhead from the final binary	9	12	7	1.07	Nice to have	Must have	Nice to have	Nice to have	Must have	Must have	Must have	Must have	Nice to have	Must have	Nice to have	Not important	Nice to have	Not important	Must have	Nice to have	Not important	Must have	Nice to have	Nice to have	Must have	Not important	Not important	Not important	Nice to have	Not important	Nice to have	Nice to have	Nice to have	Nice to have
195	As a: Language DeveloperIn order to: Interoperate with ContractsI want to: Have a clear way to understand how contracts will interact with the standard library	13	11	3	1.37	Must have	Not important	Nice to have	Nice to have	Nice to have	Nice to have	Must have	Nice to have	Must have	Must have	Must have	Nice to have	Not important	Must have	Must have	Nice to have	Must have	Nice to have	Nice to have	Must have	Nice to have	Not important	Nice to have	Must have		Must have	Must have	Must have	Must have	Not important
196	As a: Language DeveloperIn order to: Extend contracts beyond pre/post conditions on functionsI want to: Be able to use contract-like syntax on past or present runtime checkable language features such as switches, pattern matching, etc. or what might happen on signed integer overflow, etc. This might allow configuration of trapping, logging, or assuming in other areas of language UB.	4	13	11	0.75	Not important	Nice to have	Not important	Not important	Not important	Not important	Nice to have	Nice to have	Nice to have	Must have	Not important	Nice to have	Nice to have	Nice to have	Nice to have	Nice to have	Nice to have	Must have	Must have	Nice to have	Not important	Not important	Nice to have	Not important	Nice to have	Must have	Not important	Not important	Not important	Nice to have
